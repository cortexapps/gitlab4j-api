package org.gitlab4j.api.models;

import java.util.List;
import java.util.stream.Collectors;

import org.gitlab4j.api.Constants;
import org.gitlab4j.api.GitLabApiForm;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * This class is used to filter vulnerability findings when getting lists of them.
 */
public class VulnerabilityFindingFilter {

    private List<Constants.VulnerabilityFindingReportType> reportTypes;
    private List<Constants.VulnerabilityFindingSeverity> severity;
    private List<Constants.VulnerabilityFindingConfidence> confidence;
    private Constants.VulnerabilityFindingScope scope;


    @JsonIgnore
    public GitLabApiForm getQueryParams(int page, int perPage) {
        return (getQueryParams()
                .withParam(Constants.PAGE_PARAM, page)
                .withParam(Constants.PER_PAGE_PARAM, perPage));
    }


    @JsonIgnore
    public GitLabApiForm getQueryParams() {
        return (new GitLabApiForm()
                .withParam("report_type", (reportTypes != null ? String.join(",", reportTypes.stream().map(Constants.VulnerabilityFindingReportType::toString).collect(Collectors.toList())) : null))
                .withParam("severity", (severity != null ? String.join(",", severity.stream().map(Constants.VulnerabilityFindingSeverity::toString).collect(Collectors.toList())) : null))
                .withParam("confidence", (confidence != null ? String.join(",", confidence.stream().map(Constants.VulnerabilityFindingConfidence::toString).collect(Collectors.toList())) : null))
                .withParam("scope", scope)
        );
    }

    public void setReportTypes(List<Constants.VulnerabilityFindingReportType> reportTypes) {
        this.reportTypes = reportTypes;
    }

    public void setSeverity(List<Constants.VulnerabilityFindingSeverity> severity) {
        this.severity = severity;
    }

    public void setConfidence(List<Constants.VulnerabilityFindingConfidence> confidence) {
        this.confidence = confidence;
    }

    public void setScope(Constants.VulnerabilityFindingScope scope) {
        this.scope = scope;
    }
}
